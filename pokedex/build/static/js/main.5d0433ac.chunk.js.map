{"version":3,"sources":["components/login/login.js","components/display/components/action/action.js","components/display/components/tStatUpdate/tStatUpdate.js","components/display/components/sprite/sprite.js","components/display/components/demand/demand.js","components/display/display.js","components/pokeSel/pokeSel.js","App.js","serviceWorker.js","index.js"],"names":["Login","uiConfig","this","props","react_default","a","createElement","Fragment","Container","Card","CardImg","top","width","src","id","StyledFirebaseAuth_default","firebaseAuth","firebase","auth","span","class","title","height","frameBorder","alignt","href","Component","Action","TStatUpdate","state","stuff","_this2","fetch","then","r","text","setState","console","log","catch","e","_this3","onClick","getData","Sprite","Display","user_id","_this","className","sprite","tStatUpdate","action","PokeSel","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","App","isSignedIn","isPokeSel","onAuthStateChanged","user","unregisterAuthObserver","login","_this$state","react_router_dom","react_router","exact","path","component","display_display","components_login_login","pokeSel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d0433ac.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport { Container, Card, CardImg } from 'reactstrap'\r\nimport './login.css'\r\n\r\n// Import FirebaseAuth and firebase.\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\nimport firebase from 'firebase';\r\n\r\n\r\n\r\nclass Login extends Component {\r\n  render() {\r\n    const { uiConfig } = this.props\r\n    return (\r\n      <>\r\n        {/* <h1>Hello World!!</h1> */}\r\n        <Container>\r\n          <Card>\r\n            <CardImg top width='100%' src='https://davidlampreia.files.wordpress.com/2013/12/pokemon-pikachu.jpg' />\r\n            <div id=\"login\">\r\n              <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\r\n            </div>\r\n            <h2 id=\"intro\" span class=\"blinking\"> Welcome to Pokegatchi !</h2>\r\n            <p id=\"instrc\">This is a fusion of Pokemon and Tamagotchi, where you get the\r\n          best <br></br> of both worlds of raising your very own Pokemon! Feed it,\r\n          play with it, love <br></br>and care for\r\n          your very own Pokegatchi!<br></br>\r\n              <iframe src=\"https://giphy.com/embed/JgCZ2hksM1abS\" title =\"pokemonFrame\" width=\"150\" height=\"150\" frameBorder=\"0\" alignt=\"right\" id=\"pokeball\"></iframe><a href=\"https://giphy.com/stickers/pokeball-JgCZ2hksM1abS\"></a>\r\n            </p>\r\n            {/* <iframe src=\"https://giphy.com/embed/JgCZ2hksM1abS\" width=\"250\" height=\"250\" frameBorder=\"0\" alignt=\"right\" id=\"pokeball\"></iframe><a href=\"https://giphy.com/stickers/pokeball-JgCZ2hksM1abS\"></a> */}\r\n          </Card>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login ","import React, { Component } from 'react'\r\n\r\n// const diff = require('./time.js')\r\n// const sample = require('./route.js')\r\n\r\n// Feeding\r\n// const feed = () => {\r\n//     affection += 10\r\n//     exhaust += 10\r\n//     anger -= 10\r\n//     sadness -= 10\r\n//     hunger -= 10\r\n// }\r\n// Sleep\r\n     //function where user inputs the numbers of sleep hours \r\n// const sleepAction = () => {\r\n//     let isAsleep = true\r\n//     let userHours\r\n//     const numHours = 8\r\n//     if(isAsleep = true){\r\n//         affection += 10\r\n//         anger -= 10\r\n//         sadness -= 10\r\n//         exhaust -= 10\r\n//     }\r\n//     else if (numHours != userHours) { //when sleep is interrupted\r\n//         anger += 10\r\n//         sadness += 10\r\n//         affection -= 10\r\n//     }\r\n//     else if (isAsleep != true){ //when awake\r\n//         exhaust +=10\r\n//     }\r\n// }\r\n// Train\r\n// const trainAction = () => {\r\n//     hunger += 10\r\n//     exhaust += 10\r\n//     affection -= 10\r\n//     boredom -=10\r\n// }\r\n// Park \r\n// const parkAction = () => {\r\n//     affection += 10\r\n//     hunger += 10\r\n//     exhaust += 10\r\n//     boredom -= 10\r\n//     sadness -= 10\r\n//     anger -= 10\r\n// }\r\n// Pet\r\n// const petAction = () => {\r\n//     affection += 10\r\n//     boredom -= 10\r\n//     sadness -= 10\r\n//     anger -= 10\r\n// }\r\n//Play \r\n//Clean //biggie maybe\r\n//Ignore\r\n// const ignoreAction = () => {\r\n//     sadness += 10\r\n//     anger += 10\r\n//     boredom += 10\r\n//     affection -= 10\r\n// }\r\n\r\nclass Action extends Component {\r\n    render () {\r\n        return (\r\n            <>\r\n                {/* All the action HTML will go in here */}\r\n                {/* Functions will have to be written outside of Render() */}\r\n                \r\n\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Action","// for David, Gabe, and Nou\r\n// Write react page with function to update tStat\\\r\n\r\nimport React, { Component } from 'react'\r\nimport moment from 'moment'\r\n// import Moment from 'react-moment'\r\n\r\n\r\n// const tmpObj = () => {\r\n//     return {\r\n//         hunger: 60,\r\n//         hungerT : 'Tue, 01 May 2012 19:12:16 GMT',\r\n//         exhaust : 50,\r\n//         exhaustT : 'Tue, 01 May 2012 19:12:16 GMT',\r\n//         boredom : 80,\r\n//         boredomT : 'Tue, 01 May 2012 19:12:16 GMT',\r\n//         affection : 30,\r\n//         affectionT : 'Tue, 01 May 2012 19:12:16 GMT',\r\n//         anger : 10,\r\n//         angerT : 'Tue, 01 May 2012 19:12:16 GMT',\r\n//         sadness : 40,\r\n//         sadnessT : 'Tue, 01 May 2012 19:12:16 GMT',\r\n//         createdAt: 'Tue, 01 May 2012 19:12:16 GMT',\r\n//         updatedAt: 'Tue, 01 May 2012 19:12:16 GMT'\r\n//     }\r\n// }\r\nclass TStatUpdate extends Component {\r\n    state = { \r\n        stuff : ''\r\n    }\r\n    getData() {\r\n        fetch('/api/pokedex', {})\r\n            .then(r => r.text())\r\n            .then(r => {\r\n                this.setState({stuff : r})\r\n                console.log(r)\r\n            })\r\n            .catch(e => console.log(e))\r\n    }\r\n\r\n    // postData() {\r\n    //     fetch('/pokemon/:id', {\r\n    //         method : 'POST',\r\n\r\n    //     }, {\r\n            \r\n    //     })\r\n            \r\n    // }\r\n\r\n    render () {\r\n        // const timeDiff = (timeHere) => {\r\n        //     let updatedAt =  moment(timeHere, 'ddd, DD MMM YYYY kk:mm:ss').unix()\r\n        //     let diff = Math.floor((moment().unix() - updatedAt) / 60)\r\n        //     return diff\r\n        // }\r\n\r\n        return (\r\n            <>\r\n                <button onClick={() => this.getData()}>Hello</button>\r\n\r\n                <div>\r\n                    <span> {this.state.stuff} </span>\r\n                </div>\r\n                {/* Right top section of the page. */}\r\n                {/* This is where tamagotchi stat for the pokemon is going to be displayed */}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TStatUpdate\r\n","import React, { Component } from 'react'\r\n\r\nclass Sprite extends Component {\r\n    render () {\r\n        return (\r\n            <>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sprite","// Write a react page and functions to run when pokemon is demanding\r\n// This only runs when Pokemon's tStat goes below certain threshold\r\n\r\nimport React, { Component } from 'react'\r\n\r\nclass Demand extends Component {\r\n    render () {\r\n        return (\r\n            <>\r\n                {/* When tStat goes below certain threshold, demand will kick in */}\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Demand","// TO DO\r\n// Need to find a way to provide a background image depending on what the pokemon type is\r\n\r\nimport './display.css'\r\n\r\nimport React, { Component } from 'react'\r\nimport Action from './components/action'\r\nimport TStatUpdate from './components/tStatUpdate'\r\nimport Demand from './components/demand'\r\nimport Sprite from './components/sprite'\r\n\r\n\r\nclass Display extends Component {\r\n    state = {\r\n        user_id : this.props.user_id\r\n    }\r\n\r\n    render() {\r\n        const { user_id } = this.state\r\n        return (\r\n            <>\r\n            <div className='displayContainer'>\r\n                <div className='pokemonSprite'>\r\n                    <Sprite user_id={user_id}/>\r\n                </div>\r\n                <div className='TStatUpdate'>\r\n                    <TStatUpdate user_id={user_id}/>\r\n                </div>\r\n                <div className='Action'>\r\n                    <Action user_id={user_id}/>\r\n                </div>\r\n            </div>          \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display","import React, { Component } from 'react'\r\n\r\nclass PokeSel extends Component {\r\n    render () {\r\n        return (\r\n            <>\r\n                <h1> This is PokeSel Page</h1>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PokeSel","// TO DO\r\n// Need to finalize the authentication\r\n// Authentication page will have to output following information\r\n// user_id\r\n// pokemon_type\r\n\r\n\r\nimport './App.css'\r\n\r\nimport React, { Component } from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport firebase from 'firebase'\r\nimport { Button } from 'reactstrap'\r\nimport Login from './components/login'\r\nimport Display from './components/display'\r\nimport PokeSel from './components/pokeSel'\r\n\r\n/**********************************************\r\n *  *** FIREBASE LOGIN FOR GLOBAL SCOPE ***   *\r\n **********************************************/\r\n// Configure Firebase.\r\nconst config = {\r\n  apiKey: \"AIzaSyAIWFiv_P3GGtDJBD2MaC3R0jmxk0-xuW4\",\r\n  authDomain: \"pokemontamagotchi.firebaseapp.com\",\r\n  databaseURL: \"https://pokemontamagotchi.firebaseio.com\",\r\n  projectId: \"pokemontamagotchi\",\r\n  storageBucket: \"pokemontamagotchi.appspot.com\",\r\n  messagingSenderId: \"439178602865\",\r\n  appId: \"1:439178602865:web:5614d099bfddb5b8\"\r\n  // ...\r\n};\r\nfirebase.initializeApp(config);\r\n\r\n// Configure FirebaseUI.\r\nconst uiConfig = {\r\n  // Popup signin flow rather than redirect flow.\r\n  signInFlow: 'popup',\r\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\r\n  signInSuccessUrl: '/signedIn',\r\n  // We will display Google and Facebook as auth providers.\r\n  signInOptions: [\r\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n  ]\r\n};\r\n/**********************************************/\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isSignedIn: false,\r\n    isPokeSel : false,\r\n    user_id : 'test'\r\n  }\r\n  //CHECK FOR STATE CHANGES IN LOGIN\r\n  componentWillMount() {\r\n    firebase.auth().onAuthStateChanged(\r\n      (user) => this.setState({ isSignedIn: !!user })\r\n    )\r\n  }\r\n  // Listen to the Firebase Auth state and set the local state.\r\n  componentDidMount() {\r\n    this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\r\n      (user) => this.setState({ isSignedIn: !!user })\r\n    );\r\n  }\r\n  // Make sure we un-register Firebase observers when the component unmounts.\r\n  componentWillUnmount() {\r\n    this.unregisterAuthObserver();\r\n  }\r\n  render() {\r\n    const { login } = this.state\r\n    const { isSignedIn, isPokeSel, user_id } = this.state\r\n    return (\r\n      <>\r\n        <Router>\r\n          <div>\r\n          <Route exact path='/' component={() => isSignedIn ? (<Display user_id={user_id}/>) : (<Login uiConfig={uiConfig} />)} />\r\n          <Route exact path='/login' component={() => isPokeSel ? (<Display user_id={user_id}/>) : (<PokeSel />) } />\r\n          <Route exact path='/display' component={() => <Display user_id={user_id}/>} />\r\n          </div>\r\n        </Router>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}