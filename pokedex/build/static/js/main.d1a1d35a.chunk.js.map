{"version":3,"sources":["component/login/login.js","App.js","serviceWorker.js","index.js"],"names":["Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","uiConfig","signInFlow","signInSuccessUrl","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","App","this","state","login","react_default","a","createElement","Fragment","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAQoBA,mBCepBC,IAASC,cAVM,CACbC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,wCAMT,IAAMC,EAAW,CAEfC,WAAY,QAEZC,iBAAkB,YAElBC,cAAe,CACbZ,IAASa,KAAKC,mBAAmBC,cAsBtBC,mLAfOC,KAAKC,MAAfC,MACR,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACAJ,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW,kBAAMP,EAAAC,EAAAC,cAAA,SAAOb,SAAUA,iBARjDV,aC1BE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d1a1d35a.chunk.js","sourcesContent":["\nimport React, { Component } from 'react'\n// Import FirebaseAuth and firebase.\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\n\n\n\nclass Login extends Component {\n  render() {\n    const { uiConfig } = this.props\n    return (\n      <>\n        {/* <Container>\n          <Card>\n            <CardImg top width= '100%' src ='http://\n            doanarae.com/doanarae/9358-team-rocket-wallpaper_31201.jpg'/>\n          <div>\n            <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n          </div>\n          </Card>\n        </Container> */}\n      </>\n    );\n  }\n}\n\nexport default Login ","import React, { Component } from 'react'\nimport './App.css'\nimport firebase from 'firebase'\n//components doesnt exist what folder do i hit\nimport Login from './component/login/login'\nimport { Button } from 'reactstrap'\nimport { Router, Route } from 'react-router'\n\n\n/**********************************************\n *  *** FIREBASE LOGIN FOR GLOBAL SCOPE ***   *\n **********************************************/\n// Configure Firebase.\nconst config = {\n  apiKey: \"AIzaSyAIWFiv_P3GGtDJBD2MaC3R0jmxk0-xuW4\",\n  authDomain: \"pokemontamagotchi.firebaseapp.com\",\n  databaseURL: \"https://pokemontamagotchi.firebaseio.com\",\n  projectId: \"pokemontamagotchi\",\n  storageBucket: \"pokemontamagotchi.appspot.com\",\n  messagingSenderId: \"439178602865\",\n  appId: \"1:439178602865:web:5614d099bfddb5b8\"\n  // ...\n};\nfirebase.initializeApp(config);\n\n// Configure FirebaseUI.\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: 'popup',\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: '/signedIn',\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n  ]\n};\n/**********************************************/\n\nclass App extends Component {\n  render() {\n    const { login } = this.state\n    return (\n      <>\n      <Router>\n      <div>\n     \n      <Route exact path='/login' component={() => <login uiConfig={uiConfig} />} />\n\n      </div>\n      </Router>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}